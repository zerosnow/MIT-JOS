只在 lab2 存在：bochs.log
只在 lab2 存在：bochs.out
diff -ru lab/.bochsrc lab2/.bochsrc
--- lab/.bochsrc	2007-09-12 22:06:25.000000000 +0800
+++ lab2/.bochsrc	2015-12-30 14:29:14.049763999 +0800
@@ -74,7 +74,7 @@
 # now supported, but we still recommend to use the BIOS distributed with
 # Bochs. Now the start address can be calculated from image size.
 #=======================================================================
-romimage: file=$BXSHARE/BIOS-bochs-latest, address=0xf0000
+romimage: file=$BXSHARE/BIOS-bochs-latest
 #romimage: file=mybios.bin, address=0xfff80000 # 512k at memory top
 #romimage: file=mybios.bin # calculate start address from image size
 
diff -ru lab/boot/main.c lab2/boot/main.c
--- lab/boot/main.c	2007-09-12 22:06:25.000000000 +0800
+++ lab2/boot/main.c	2015-12-30 14:29:14.049763999 +0800
@@ -32,8 +32,8 @@
 #define SECTSIZE	512
 #define ELFHDR		((struct Elf *) 0x10000) // scratch space
 
-void readsect(void*, uint32_t);
-void readseg(uint32_t, uint32_t, uint32_t);
+static void readsect(void*, uint32_t);
+static void readseg(uint32_t, uint32_t, uint32_t);
 
 void
 bootmain(void)
@@ -66,7 +66,7 @@
 
 // Read 'count' bytes at 'offset' from kernel into virtual address 'va'.
 // Might copy more than asked
-void
+static void
 readseg(uint32_t va, uint32_t count, uint32_t offset)
 {
 	uint32_t end_va;
@@ -90,7 +90,7 @@
 	}
 }
 
-void
+static void
 waitdisk(void)
 {
 	// wait for disk reaady
@@ -98,7 +98,7 @@
 		/* do nothing */;
 }
 
-void
+static void
 readsect(void *dst, uint32_t offset)
 {
 	// wait for disk to be ready
diff -ru lab/conf/env.mk lab2/conf/env.mk
--- lab/conf/env.mk	2007-09-12 22:06:25.000000000 +0800
+++ lab2/conf/env.mk	2015-12-30 14:29:14.049763999 +0800
@@ -6,7 +6,7 @@
 #
 # For overview commands only, the line should read 'V = @'.
 # For overview and verbose commands, the line should read 'V ='.
-V = @
+V = 
 
 # If your system-standard GNU toolchain is ELF-compatible, then comment
 # out the following line to use those tools (as opposed to the i386-jos-elf
只在 lab2 存在：.git
diff -ru lab/GNUmakefile lab2/GNUmakefile
--- lab/GNUmakefile	2007-09-12 22:06:25.000000000 +0800
+++ lab2/GNUmakefile	2015-12-30 14:29:14.049763999 +0800
@@ -70,7 +70,7 @@
 # -fno-builtin is required to avoid refs to undefined functions in the kernel.
 # Only optimize to -O1 to discourage inlining, which complicates backtraces.
 CFLAGS := $(CFLAGS) $(DEFS) $(LABDEFS) -O1 -fno-builtin -I$(TOP) -MD 
-CFLAGS += -Wall -Wno-format -Wno-unused -Werror -gstabs -m32
+CFLAGS += -Wall -Wno-format -Wno-unused -Werror -gstabs -m32 -fno-omit-frame-pointer
 
 # Add -fno-stack-protector if the option exists.
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
只在 lab2 存在：init.d
只在 lab2 存在：init.s
diff -ru lab/kern/kdebug.c lab2/kern/kdebug.c
--- lab/kern/kdebug.c	2007-09-12 22:06:25.000000000 +0800
+++ lab2/kern/kdebug.c	2015-12-30 19:45:07.803621999 +0800
@@ -108,7 +108,7 @@
 {
 	const struct Stab *stabs, *stab_end;
 	const char *stabstr, *stabstr_end;
-	int lfile, rfile, lfun, rfun, lline, rline;
+	int lfile, rfile, lfun, rfun, lline, rline, largs;
 
 	// Initialize *info
 	info->eip_file = "<unknown>";
@@ -145,6 +145,11 @@
 	if (lfile == 0)
 		return -1;
 
+	if (lfile <= rfile) {
+		if (stabs[lfile].n_strx < stabstr_end - stabstr)
+			info->eip_file = stabstr + stabs[lfile].n_strx;
+	} 
+
 	// Search within that file's stabs for the function definition
 	// (N_FUN).
 	lfun = lfile;
@@ -158,22 +163,23 @@
 			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
 		info->eip_fn_addr = stabs[lfun].n_value;
 		addr -= info->eip_fn_addr;
+
+
+		
+
 		// Search within the function definition for the line number.
-		lline = lfun;
-		rline = rfun;
+		
 	} else {
 		// Couldn't find function stab!  Maybe we're in an assembly
 		// file.  Search the whole file for the line number.
 		info->eip_fn_addr = addr;
-		lline = lfile;
-		rline = rfile;
 	}
 	// Ignore stuff after the colon.
 	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
-
 	
 	// Search within [lline, rline] for the line number stab.
 	// If found, set info->eip_line to the right line number.
+	
 	// If not found, return -1.
 	//
 	// Hint:
@@ -181,25 +187,32 @@
 	//	Look at the STABS documentation and <inc/stab.h> to find
 	//	which one.
 	// Your code here.
-
+	lline = lfun;
+	rline = rfun;
+	stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+	if (lline <= rline) {
+		info->eip_line = stabs[rline].n_desc;
+	}else return -1;
 	
 	// Search backwards from the line number for the relevant filename
 	// stab.
 	// We can't just use the "lfile" stab because inlined functions
 	// can interpolate code from a different file!
 	// Such included source files use the N_SOL stab type.
-	while (lline >= lfile
-	       && stabs[lline].n_type != N_SOL
-	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
-		lline--;
-	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
-		info->eip_file = stabstr + stabs[lline].n_strx;
-
+	// while (lline >= lfile
+	//        && stabs[lline].n_type != N_SOL
+	//        && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
+	// 	lline--;
+	// if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
+	// 	info->eip_file = stabstr + stabs[lline].n_strx;
 
 	// Set eip_fn_narg to the number of arguments taken by the function,
 	// or 0 if there was no containing function.
 	// Your code here.
+	largs = lfun+1;
+	while (stabs[largs++].n_type == N_PSYM) {
+		info->eip_fn_narg++;
+	}
 
-	
 	return 0;
 }
diff -ru lab/kern/monitor.c lab2/kern/monitor.c
--- lab/kern/monitor.c	2007-09-12 22:06:25.000000000 +0800
+++ lab2/kern/monitor.c	2015-12-30 19:57:52.421739999 +0800
@@ -24,10 +24,12 @@
 static struct Command commands[] = {
 	{ "help", "Display this list of commands", mon_help },
 	{ "kerninfo", "Display information about the kernel", mon_kerninfo },
+	{ "backtrace", "Display the list of stack backtrace", mon_backtrace},
 };
 #define NCOMMANDS (sizeof(commands)/sizeof(commands[0]))
 
 unsigned read_eip();
+unsigned read_ebp();
 
 /***** Implementations of basic kernel monitor commands *****/
 
@@ -60,6 +62,22 @@
 mon_backtrace(int argc, char **argv, struct Trapframe *tf)
 {
 	// Your code here.
+	uint32_t *ebp = (uint32_t *)read_ebp();
+	uint32_t eip = read_eip();
+	struct Eipdebuginfo info;
+	char fun_name[256];
+	cprintf("Stack backtrace\n");
+	
+	while(ebp != 0) {
+		debuginfo_eip(eip, &info);
+		strncpy(fun_name, info.eip_fn_name, info.eip_fn_namelen);
+		fun_name[info.eip_fn_namelen] = '\0';
+		cprintf("%s: %d:  %s+%x\n", info.eip_file, info.eip_line, fun_name, eip-(info.eip_fn_addr));
+		cprintf("ebp %08x eip %08x args %08x %08x %08x %08x %08x\n", ebp, eip, *(ebp+2), *(ebp+3), *(ebp+4), *(ebp+5), *(ebp+6)); 
+		eip = *(ebp+1);
+		ebp = (unsigned *)*ebp;
+	}
+	//cprintf("ebp %08x eip %08x args %08x %08x %08x %08x %08x\n", ebp, *(ebp+1), *(ebp+2), *(ebp+3), *(ebp+4), *(ebp+5), *(ebp+6)); 
 	return 0;
 }
 
@@ -129,6 +147,7 @@
 // return EIP of caller.
 // does not work if inlined.
 // putting at the end of the file seems to prevent inlining.
+unsigned read_eip() __attribute__((noinline));
 unsigned
 read_eip()
 {
只在 lab2/kern 存在：monitor.c.orig
diff -ru lab/kern/pmap.c lab2/kern/pmap.c
--- lab/kern/pmap.c	2007-09-12 22:06:25.000000000 +0800
+++ lab2/kern/pmap.c	2016-01-04 14:18:01.936002002 +0800
@@ -121,8 +121,11 @@
 	//	Step 2: save current value of boot_freemem as allocated chunk
 	//	Step 3: increase boot_freemem to record allocation
 	//	Step 4: return allocated chunk
+	boot_freemem  = ROUNDUP(boot_freemem, align);
+	v = (void *)boot_freemem;
+	boot_freemem += ROUNDUP(n, align);
 
-	return NULL;
+	return v;
 }
 
 // Set up a two-level page table:
@@ -145,7 +148,7 @@
 	size_t n;
 
 	// Delete this line:
-	panic("i386_vm_init: This function is not finished\n");
+	//panic("i386_vm_init: This function is not finished\n");
 
 	//////////////////////////////////////////////////////////////////////
 	// create initial page directory.
@@ -174,6 +177,7 @@
 	// programs will get read-only access to the array as well.
 	// You must allocate the array yourself.
 	// Your code goes here: 
+	pages = boot_alloc(sizeof(struct Page) * npage, PGSIZE);
 
 
 	//////////////////////////////////////////////////////////////////////
@@ -197,7 +201,8 @@
 	//    - pages -- kernel RW, user NONE
 	//    - the read-only version mapped at UPAGES -- kernel R, user R
 	// Your code goes here:
-
+	
+	boot_map_segment(pgdir, UPAGES, (void *)boot_freemem-(void *)pages, PADDR(pages), PTE_U | PTE_P);
 
 
 	//////////////////////////////////////////////////////////////////////
@@ -209,6 +214,7 @@
 	//     Permissions: kernel RW, user NONE
 	// Your code goes here:
 
+	boot_map_segment(pgdir, KSTACKTOP-KSTKSIZE, KSTKSIZE, PADDR(bootstack), PTE_W | PTE_P);
 	//////////////////////////////////////////////////////////////////////
 	// Map all of physical memory at KERNBASE. 
 	// Ie.  the VA range [KERNBASE, 2^32) should map to
@@ -217,7 +223,7 @@
 	// we just set up the amapping anyway.
 	// Permissions: kernel RW, user NONE
 	// Your code goes here: 
-
+	boot_map_segment(pgdir, KERNBASE, 0xFFFFFFFF - KERNBASE + 1, 0, PTE_W | PTE_P);
 	// Check that the initial page directory has been set up correctly.
 	check_boot_pgdir();
 
@@ -432,10 +438,19 @@
 	// Change the code to reflect this.
 	int i;
 	LIST_INIT(&page_free_list);
-	for (i = 0; i < npage; i++) {
+	pages[0].pp_ref = 1;
+	for (i = 1; i < IOPHYSMEM/PGSIZE; i++) {
+		pages[i].pp_ref = 0;
+		LIST_INSERT_HEAD(&page_free_list, &pages[i], pp_link);
+	}
+	for (i = IOPHYSMEM/PGSIZE; i < (int)(ROUNDUP(boot_freemem-KERNBASE, PGSIZE))/PGSIZE; i++) {
+		pages[i].pp_ref = 1;
+	}
+	for (i = (int)(ROUNDUP(boot_freemem-KERNBASE, PGSIZE))/PGSIZE; i < npage;i++) {
 		pages[i].pp_ref = 0;
 		LIST_INSERT_HEAD(&page_free_list, &pages[i], pp_link);
 	}
+
 }
 
 //
@@ -467,6 +482,11 @@
 page_alloc(struct Page **pp_store)
 {
 	// Fill this function in
+	if ((*pp_store = LIST_FIRST(&page_free_list)) != NULL) {
+		//(*pp_store)->pp_ref = 1;
+		LIST_REMOVE(*pp_store, pp_link);
+		return 0;
+	}
 	return -E_NO_MEM;
 }
 
@@ -477,6 +497,10 @@
 void
 page_free(struct Page *pp)
 {
+	if (pp->pp_ref == 0) {
+		page_initpp(pp);
+		LIST_INSERT_HEAD(&page_free_list, pp, pp_link);
+	}
 	// Fill this function in
 }
 
@@ -507,8 +531,28 @@
 pte_t *
 pgdir_walk(pde_t *pgdir, const void *va, int create)
 {
-	// Fill this function in
-	return NULL;
+	pte_t *pt_addr;
+	struct Page *page;
+	//cprintf("%x,%x\n", va, (pgdir[PDX(va)] & PTE_P));
+	if ((pgdir[PDX(va)] & PTE_P) != 0) {
+		
+		pt_addr = (pte_t *)KADDR(PTE_ADDR(pgdir[PDX(va)]));
+		//cprintf("%x\n", *pt_addr);
+		return &pt_addr[PTX(va)];
+	}else {
+		if (create == 0 ) return NULL;
+		else {
+			if (page_alloc(&page) != 0) return NULL;
+			else {
+				page->pp_ref = 1;
+
+				pgdir[PDX(va)] = page2pa(page) |PTE_U | PTE_W | PTE_P;
+				pt_addr =  (pte_t *)KADDR(PTE_ADDR(pgdir[PDX(va)]));
+				memset(pt_addr, 0, PGSIZE);
+				return &pt_addr[PTX(va)];
+			}
+		}
+	}
 }
 
 //
@@ -517,7 +561,7 @@
 //  entry should be set to 'perm|PTE_P'.
 //
 // Details
-//   - If there is already a page mapped at 'va', it is page_remove()d.
+//   - If there is already a page mapped at 'va', it is page_removed().
 //   - If necessary, on demand, allocates a page table and inserts it into
 //     'pgdir'.
 //   - pp->pp_ref should be incremented if the insertion succeeds.
@@ -533,7 +577,16 @@
 int
 page_insert(pde_t *pgdir, struct Page *pp, void *va, int perm) 
 {
-	// Fill this function in
+	pte_t *pt_addr;
+	pt_addr = pgdir_walk(pgdir, va, 1);
+	if (va == (void *)PTSIZE) return -E_NO_MEM;
+	if (pt_addr == NULL) return -E_NO_MEM;
+	if ((pp == page_lookup(pgdir, va, NULL)) && (*pt_addr == (page2pa(pp) | perm | PTE_P))) return 0;
+	if ((*pt_addr & PTE_P) != 0) 
+		page_remove(pgdir, va);
+	pp->pp_ref ++;
+	*pt_addr = page2pa(pp) | perm | PTE_P;
+	//cprintf("%x, %x", *pt_addr, npage);
 	return 0;
 }
 
@@ -550,6 +603,17 @@
 static void
 boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, physaddr_t pa, int perm)
 {
+	int i;
+	pte_t *pt_addr;
+	// for (i=0;i<n;i++) {
+	// 	pt_addr = pgdir_walk(pgdir, (void *)(la+i*PGSIZE), 1);
+	// 	*pt_addr =  (pa + i*PGSIZE) | perm | PTE_P;
+	// }
+	for (i=0;i<size;i+=PGSIZE) {
+		pt_addr = pgdir_walk(pgdir, (void *)(la+i), 1);
+		*pt_addr = (pa+i) |perm |PTE_P;
+	}
+	return ;
 	// Fill this function in
 }
 
@@ -566,8 +630,12 @@
 struct Page *
 page_lookup(pde_t *pgdir, void *va, pte_t **pte_store)
 {
-	// Fill this function in
-	return NULL;
+	pte_t *pt_addr;
+	pt_addr = pgdir_walk(pgdir, va, 0);
+	if (pt_addr == NULL) return NULL;
+	if (pte_store !=NULL)
+		*pte_store = pt_addr;
+	return pa2page(*pt_addr);
 }
 
 //
@@ -588,7 +656,15 @@
 void
 page_remove(pde_t *pgdir, void *va)
 {
-	// Fill this function in
+	struct Page *pg;
+	pte_t *pt_addr;
+	pg = page_lookup(pgdir, va, &pt_addr);
+	if (pg == NULL) return ;
+	else 
+		page_decref(pg);
+	if (pt_addr != NULL)
+		*pt_addr = 0;
+	tlb_invalidate(pgdir, va);
 }
 
 //
@@ -629,7 +705,6 @@
 
 	// should be no free memory
 	assert(page_alloc(&pp) == -E_NO_MEM);
-
 	// there is no page allocated at address 0
 	assert(page_lookup(boot_pgdir, (void *) 0x0, &ptep) == NULL);
 
@@ -638,20 +713,23 @@
 
 	// free pp0 and try again: pp0 should be used for page table
 	page_free(pp0);
+	
 	assert(page_insert(boot_pgdir, pp1, 0x0, 0) == 0);
+	
 	assert(PTE_ADDR(boot_pgdir[0]) == page2pa(pp0));
+
 	assert(check_va2pa(boot_pgdir, 0x0) == page2pa(pp1));
 	assert(pp1->pp_ref == 1);
 	assert(pp0->pp_ref == 1);
 
 	// should be able to map pp2 at PGSIZE because pp0 is already allocated for page table
 	assert(page_insert(boot_pgdir, pp2, (void*) PGSIZE, 0) == 0);
+	//cprintf("3333333333\n");
 	assert(check_va2pa(boot_pgdir, PGSIZE) == page2pa(pp2));
 	assert(pp2->pp_ref == 1);
 
 	// should be no free memory
 	assert(page_alloc(&pp) == -E_NO_MEM);
-
 	// should be able to map pp2 at PGSIZE because it's already there
 	assert(page_insert(boot_pgdir, pp2, (void*) PGSIZE, 0) == 0);
 	assert(check_va2pa(boot_pgdir, PGSIZE) == page2pa(pp2));
@@ -660,7 +738,6 @@
 	// pp2 should NOT be on the free list
 	// could happen in ref counts are handled sloppily in page_insert
 	assert(page_alloc(&pp) == -E_NO_MEM);
-
 	// check that pgdir_walk returns a pointer to the pte
 	ptep = KADDR(PTE_ADDR(boot_pgdir[PDX(PGSIZE)]));
 	assert(pgdir_walk(boot_pgdir, (void*)PGSIZE, 0) == ptep+PTX(PGSIZE));
@@ -669,6 +746,7 @@
 	assert(page_insert(boot_pgdir, pp2, (void*) PGSIZE, PTE_U) == 0);
 	assert(check_va2pa(boot_pgdir, PGSIZE) == page2pa(pp2));
 	assert(pp2->pp_ref == 1);
+	//cprintf("11111111\n");
 	assert(*pgdir_walk(boot_pgdir, (void*) PGSIZE, 0) & PTE_U);
 	
 	// should not be able to map at PTSIZE because need free page for page table
diff -ru lab/lib/printfmt.c lab2/lib/printfmt.c
--- lab/lib/printfmt.c	2007-09-12 22:06:25.000000000 +0800
+++ lab2/lib/printfmt.c	2015-12-30 14:29:14.049763999 +0800
@@ -206,12 +206,9 @@
 
 		// (unsigned) octal
 		case 'o':
-			// Replace this with your code.
-			putch('X', putdat);
-			putch('X', putdat);
-			putch('X', putdat);
-			break;
-
+			num = getuint(&ap, lflag);
+			base = 8;
+			goto number;
 		// pointer
 		case 'p':
 			putch('0', putdat);
只在 lab2 存在：.tags
